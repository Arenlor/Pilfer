pilfer.utilities = {	isImage : function(target) {		return (target.toLowerCase().match(/\.(?:jpe?g|png|gif|bmp|svg)/i)) ? true : false;	},  getImageFilename : function (target) {    var match = /.*\/(.*)$/.exec(target)    return (match) ? match[1] : false;	  },	getImageParentDirectory : function(target) {    var match = /(^.*\/)(?:.+)/.exec(target);    return (match) ? match[1] : false;  },		  getCurrentTarget : function() {    var target = null;    if (gContextMenu.onImage) {      target = gContextMenu.target.src;    } else if (gContextMenu.onLink) {      target = gContextMenu.link.toString();    }     var shouldParseQuery = pilfer.preferences.parseQuery();    if (!target) return;    if (!pilfer.utilities.isImage(target)) return;      var reg = (shouldParseQuery) ? /(.*)/ : /(.*)\?.*/;    var match = reg.exec(target);    return (match) ? match[1] : target;  },	getPiflerFormattedAddress : function(target, range, direction, leading) {		var match = target.match(/(\d+)\D*$/);		if (!match) return;				var direction = parseInt(direction, 10);		var range = parseInt(range, 10);		var deltaS = match[1];		var deltaI = parseInt(match[1], 10);		var alpha, omega;		if (deltaS.substr(0,1) == 0) leading = true;		switch (direction) {			case 1:				alpha = deltaI;				omega = deltaI + range;				break;			case 2:				alpha = deltaI - range;				omega = deltaI;				break;			case 3:				alpha = deltaI - range;				omega = deltaI + range;				break;		}		alpha = (alpha < 0) ? 0 : alpha;		omega = (omega < 0) ? 0 : omega;		if (leading) {			var length = deltaS.length;			while (alpha.toString().length < length) alpha = '0' + alpha;			while (omega.toString().length < length) omega = '0' + omega;		}		return target.replace(/\d+(\D*)$/, '[' + alpha + '-' + omega + ']$1');	}};